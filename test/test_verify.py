import json
from indy_port.verify import *

#### Functions for loading test data
def load_test_file(name:str) -> dict:
    with open(f'data/tests/{name}.json', 'r') as f:
        return json.loads(f.read())
"""
Converts stringified integers in a dict to ints
""" 
def vals_to_int(obj:dict, key=None):
    target = obj[key] if key else obj
    for k, v in target.items():
        if type(v) is str:
            target[k] = int(v)

def load_credential_primary_public_key() -> dict:
    obj = load_test_file('credential_primary_public_key')
    vals_to_int(obj)
    vals_to_int(obj['r'])
    return obj

def load_primary_eq_proof() -> dict:
    obj = load_test_file('primary_eq_proof')
    vals_to_int(obj)
    vals_to_int(obj['revealed_attrs'])
    vals_to_int(obj['m'])
    return obj

def load_ne_proof() -> dict:
    obj = load_test_file('ne_proof')
    vals_to_int(obj)
    vals_to_int(obj, 'u')
    vals_to_int(obj, 'r')
    vals_to_int(obj, 't')
    return obj

def load_unrevealed_attrs() -> list:
    return ["height", "age", "sex"]

def test_calc_teq():
    expected = 91264240506826174927348047353965425159860757123338479073424113940259806551851229292237119667270337226044891882031507391247335164506822323444174803404823415595209988313925779411601427163169867402731683535732199690625942446654645156277416114003097696459602759772355589838338098112196343083991333232435443953495090160789157756256594127180544038043918022344493848651792154647005487993074823035954414813424278780163108302094976055852493721853967615097172351343103854345595377663442839788671277249341676912758940126819293663537960202673372394563353933943790374230983129060596346889726181201177754774157687114812348019929279

    proof = load_primary_eq_proof()

    res = calc_teq(
            p_pub_key=load_credential_primary_public_key(),
            a_prime=proof['a_prime'],
            e=proof['e'],
            v=proof['v'],
            m_tilde=proof['m'],
            m2tilde=proof['m2'],
            unrevealed_attrs=load_unrevealed_attrs()
            )

    assert res == expected

def test_calc_tne():
    proof = load_ne_proof()
    pk = load_credential_primary_public_key()
    res_data = calc_tne(
            pk,
            proof['u'],
            proof['r'],
            proof['mj'],
            proof['alpha'],
            proof['t'],
            predicate_is_less(proof['predicate'])
            );
    assert 65515179709108026467913442253499099801966907020745255347110398650355916665803837070743742856256239926182580344828747056374854996387593743341119067779984445971959628821374954624125259986776588712694484260532223243155004707730091232554480477132219992945402707566277358152501360632014253935013985662381916247720671148707249946908885935798495651223006117551824336990348194142359095214983750938766847922335263906099668502110108213509816408727203285417799732710557464731810621993308635556837149106069127879412025831831902348616785489451865822186524800436027192696216152105090506015757266556255232306144655608567343136505670 == res_data[1]

    assert 37533780917779531511237145959836444300689607963031476900866684621488489918126566549521889953514727910575781249476835854546757846221784411088089185036186792246785963648143366397502159012152353145753888331365853963358155135442054751416620007628556393795100498260908294371022811442070620351098758127098244798879430407810333937749563329381152076445529402863878168823425796701343716083092433240425563155523357082891438811091111226019426720893504830292043278152141736791123288773813527455078223655469497666616699048262253832499575715918268161607620654341861117070040350723055043721492475393447378422268465089327305214127497 == res_data[4]

    assert 85792352895820240333890789102145726421844499161302737480886489756497939690747882476232993619450034358080431321661007128196198281806423085966407473046006187053994245452998741843631201950275110777364312249003319362038697793775377082322949653888826775245421712887332420051752162962176051068381742850661487019199688955385460549344136833325388021671633290649550405155653891490163080779548518087060830955821092481708474638805362493661566057142675967527663183993708768033669078126632504366308385415802955961151772167870231474144073772802283182375145256219426454149503998537986414519426715148839164974816475472185621648644891 == res_data[5]

def test_verify_equality():
    expected = 10403187904873314760355557832761590691431383521745031865309573910963034393207684410473727200515283477478376473602591257259106279678624852029355519315648291936226793749327383847453659785035143404901389180684693937348170201350989434402765939255768789625180291625978184555673228742169810564578048461551461925810052930346018787363753466820600660809185539201223715614073753236155593704206176748170586820334068878049220243421829954440440126364488974499959662371883050129101801650402485085948889890560553367693634003096560104152231733949195252484402507347769428679283112853202405399796966635008669186194259851326316679551259

    proof = load_primary_eq_proof()
    pk = load_credential_primary_public_key()
    c_h = int(load_test_file('aggregated_proof')['c_hash'])
    credential_schema = load_test_file('credential_schema')
    non_credential_schema = load_test_file('non_credential_schema')
    sub_proof_request = load_test_file('sub_proof_request')

    res = verify_equality( p_pub_key = pk,
        proof=proof,
        c_hash=c_h,
        cred_schema=credential_schema,
        non_cred_schema=non_credential_schema,
        sub_proof_request=sub_proof_request
    )
    
    assert expected == res[0]

def test_verify_ne_predicate():
        proof = load_ne_proof()
        c_h = int(load_test_file('aggregated_proof')['c_hash'])
        pk = load_credential_primary_public_key()

        res = verify_ne_predicate(pk, proof, c_h)

        assert 84541983257221862363846490076513159323178083291858042421207690118109227097470776291565848472337957726359091501353000902540328950379498905188603938865076724317214320854549915309320726359461624961961733838169355523220988096175066605668081002682252759916826945673002001231825064670095844788135102734720995698848664953286323041296412437988472201525915887801570701034703233026067381470410312497830932737563239377541909966580208973379062395023317756117032804297030709565889020933723878640112775930635795994269000136540330014884309781415188247835339418932462384016593481929101948092657508460688911105398322543841514412679282 == res[0]

        assert 84541983257221862363846490076513159323178083291858042421207690118109227097470776291565848472337957726359091501353000902540328950379498905188603938865076724317214320854549915309320726359461624961961733838169355523220988096175066605668081002682252759916826945673002001231825064670095844788135102734720995698848664953286323041296412437988472201525915887801570701034703233026067381470410312497830932737563239377541909966580208973379062395023317756117032804297030709565889020933723878640112775930635795994269000136540330014884309781415188247835339418932462384016593481929101948092657508460688911105398322543841514412679282 == res[4]

        assert 71576740094469616050175125038612941221466947853166771156257978699698137573095744200811891005812207466193292025189595165749324584760557051762243613675513037542326352529889732378990457572908903168034378406865820691354892874894693473276515751045246421111011260438431516865750528792129415255282372242857723274819466930397323134722222564785435619193280367926994591910298328813248782022939309948184632977090553101391015001992173901794883378542109254048900040301640312902056379924070500971247615062778344704821985243443504796944719578450705940345940533745092900800249667587825786217899894277583562804465078452786585349967293 == res[5]

